name: Build Kernel by Android NDK
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by Android NDK
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - uses: actions/checkout@v4

    - name: 环境变量配置
      run: |
        cat config.env | grep KERNEL_SOURCE= >> $GITHUB_ENV
        cat config.env | grep KERNEL_SOURCE_BRANCH= >> $GITHUB_ENV
        cat config.env | grep KERNEL_CONFIG= >> $GITHUB_ENV
        cat config.env | grep KERNEL_ZIP_NAME= >> $GITHUB_ENV
        cat config.env | grep ENABLE_KVM= >> $GITHUB_ENV
        cat config.env | grep ENABLE_LXC_DOCKER= >> $GITHUB_ENV
        cat config.env | grep KERNEL_IMAGE_NAME= >> $GITHUB_ENV
        cat config.env | grep LLVM_CONFIG= >> $GITHUB_ENV
        cat config.env | grep SWITCH_PYTHON= >> $GITHUB_ENV
        cat config.env | grep NEED_DTBO= >> $GITHUB_ENV
        cat config.env | grep ENABLE_KERNELSU= >> $GITHUB_ENV
        cat config.env | grep KERNELSU_TAG= >> $GITHUB_ENV

    - name: 构建编译内核环境
      run: |
        sudo apt update
        sudo apt -y install git make bc bison ccache openssl zip kmod cpio flex libelf-dev curl libssl-dev libtfm-dev axel device-tree-compiler ca-certificates python3 python2 binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: 切换python2.7
      if: env.SWITCH_PYTHON == 'true'
      run: |
        sudo rm -f /usr/bin/python
        sudo ln -s /usr/bin/python2.7 /usr/bin/python

    - name: 下载谷歌clang12编译器
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir tool
        wget -O ndk.zip https://dl.google.com/android/repository/android-ndk-r13b-linux-x86_64.zip
        unzip ndk.zip -d tool/
        cd ./tool
        mv *-ndk-* NDK
        
    - name: 下载内核源码
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1


    - name: 开启lxc和docker配置
      if: env.ENABLE_LXC_DOCKER == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        axel https://github.com/jqtmviyu/LXC_KernelSU_Action/raw/refs/heads/main/patches/lxc-docker-config.conf
        cat lxc-docker-config.conf >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "# CONFIG_ANDROID_PARANOID_NETWORK is not set" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}

    - name: 添加runc补丁
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        axel https://github.com/jqtmviyu/LXC_KernelSU_Action/raw/refs/heads/main/patches/runcpatch.sh
        chmod a+x runcpatch.sh
        if [ -f android-kernel/kernel/cgroup.c ]; then
        ./runcpatch.sh android-kernel/kernel/cgroup.c
        fi
        if [ -f android-kernel/kernel/cgroup/cgroup.c ]; then
        ./runcpatch.sh android-kernel/kernel/cgroup/cgroup.c
        fi

    - name: 配置 ksu
      if: env.ENABLE_KERNELSU == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/jqtmviyu/KernelSU/095/kernel/setup.sh" | bash -s ${{ env.KERNELSU_TAG }}

    - name: 开启kvm
      if: env.ENABLE_KVM == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        echo "CONFIG_VIRTUALIZATION=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_KVM=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_VHOST_NET=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_VHOST_CROSS_ENDIAN_LEGACY=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}

    - name: 设置ccache缓存
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build-kernel-mido-kernel
        max-size: 2G

    - name: 开始编译内核
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/tool/NDK/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin:$PATH
        export CROSS_COMPILE=aarch64-linux-android-
        make O=out ARCH=arm64 ${{ env.KERNEL_CONFIG }}
        if [ ${{env.LLVM_CONFIG}}=y ]; then
        make -j$(nproc --all) O=out ARCH=arm64 CROSS_COMPILE="aarch64-linux-android-" LLVM=1 LLVM_IAS=1
        else
        make -j$(nproc --all) O=out ARCH=arm64 CROSS_COMPILE="aarch64-linux-android-"
        fi

    - name: 准备打包内核
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3
        cd AnyKernel3
        git checkout 458caeda335554c58930bf6dbfa23e829911e338
        cd ../
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=/dev/block/bootdevice/by-name/boot;!g' AnyKernel3/anykernel.sh
        sed -i 's/is_slot_device=1;/is_slot_device=0;/g' AnyKernel3/anykernel.sh
        cp android-kernel/out/arch/arm64/boot/${{ env.KERNEL_IMAGE_NAME }} AnyKernel3/
        rm -rf AnyKernel3/.git* AnyKernel3/README.md
        rm -rf AnyKernel3/ramdisk AnyKernel3/modules AnyKernel3/patch


    - name: 打包并上传
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_ZIP_NAME }}
        path: kernel_workspace/AnyKernel3/*

    - name: 上传wlan.ko
      uses: actions/upload-artifact@v4
      with:
        name: wlan.ko
        path: kernel_workspace/android-kernel/out/drivers/staging/prima/wlan.ko
